/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package edu.au.cc.gallery.ui;

import edu.au.cc.gallery.data.ImageDAO;
import edu.au.cc.gallery.data.ListImages;
import edu.au.cc.gallery.data.Image;
import edu.au.cc.gallery.data.User;

import static spark.Spark.*;

import spark.Response;
import spark.Request;
import spark.ModelAndView;
import spark.template.handlebars.HandlebarsTemplateEngine;

import java.util.HashMap;
import java.util.Map;

public class App {

    public static void main(String[] args) throws Exception {
        String portString = System.getenv("JETTY_PORT");
        if (portString == null || portString.equals(""))
            port(5000);
        else
            port(Integer.parseInt(portString));
        addRoutes();
        Admin.addRoutes();
    }

    private static void addRoutes() {
        get("/sessionDemo", (req, res) -> sessionDemo(req, res));
        get("/debugSession", (req, res) -> debugSession(req, res));
        get("/login", (req, res) -> login(req, res));
        post("/login", (req, res) -> loginPost(req, res));
        before("/user/:username/*", (req, res) -> checkUser(req, res));
        get("/user/:username/images", (req, res) -> getUserHome(req, res));
        post("/user/:username/images", (req, res) -> addImage(req, res));
        get("/user/:username/images/:image", (req, res) -> getImage(req, res));
    }

    public static ImageDAO getImageDAO() throws Exception {
        return ListImages.getImageDAO();
    }

    private static String login(Request req, Response resp) {
        Map<String, Object> model = new HashMap<>();
        return render(model, "login.hbs");
    }

    private static String loginPost(Request req, Response resp) {
        try {
            String username = req.queryParams("username");
            User user = Admin.getUserDAO().getUserByUsername(username);
            if (user == null || !user.getPassword().equals(req.queryParams("password")))
                resp.redirect("/login");
            req.session().attribute("user", username);
            resp.redirect("/debugSession");
        } catch (Exception ex) {
            return "[ERR]: " + ex.getMessage();
        }

        return "";
    }

    private static String sessionDemo(Request req, Response resp) {
        if (req.session().isNew()) {
            req.session().attribute("value", 0);
        } else {
            req.session().attribute("value", (int) req.session().attribute("value") + 1);
        }

        return "<h1>" + req.session().attribute("value") + "</h1>";
    }

    private static String debugSession(Request req, Response resp) {
        StringBuffer sb = new StringBuffer();
        for (String key : req.session().attributes()) {
            sb.append(key + "->" + req.session().attribute(key) + "<br />");
        }
        return sb.toString();
    }

    private static boolean isUser(String username, String currentUser) {
        return username != null && currentUser != null && username.equals(currentUser);
    }

    private static String checkUser(Request req, Response res) {
        String currentUser = req.session().attribute("user");
        try {
            if (!isUser(req.params("username"), currentUser)) {
                if (currentUser != null && Admin.getUserDAO().getUserByUsername(currentUser) != null) {
                    res.redirect("/user/" + currentUser);
                } else
                    res.redirect("/login");
                halt();
                return "";
            }
        } catch (Exception ex) {
            return "[ERR]: " + ex.getMessage();
        }

        return "";
    }

    private static String getUserHome(Request req, Response res) {
        Map<String, Object> model = new HashMap<>();
        model.put("user", req.params("username"));
        // TODO: put a list of images from S3 into model
        // TODO: create the template for userhome
        return render(model, "userhome.hbs");
    }

    private static String addImage(Request req, Response res) {
        String username = req.queryParams("username");
        String uuid = req.queryParams("uuid");
        String imageData = req.queryParams("image");
        try {
            User user = Admin.getUserDAO().getUserByUsername(username);
            Image image = new Image(user, uuid, imageData);
            getImageDAO().addImage(user, image);
        } catch (Exception ex) {
            return "[ERR]: " + ex.getMessage();
        }

        res.redirect("/user/" + username + "/images");
        return "";
    }

    private static String getImage(Request req, Response res) {
        Map<String, Object> model = new HashMap<>();
        String username = req.params("username");
        String uuid = req.params("uuid");
        model.put("user", username);
        model.put("uuid", uuid);
        try {
            User user = Admin.getUserDAO().getUserByUsername(username);
            Image image = getImageDAO().getImage(user, uuid);
        } catch (Exception ex){
            return "[ERR]: " + ex.getMessage();
        }
        return render(model, "singleimage.hbs");
    }

    public static String render(Map<String, Object> model, String templatePath) {
        return new HandlebarsTemplateEngine()
                .render(new ModelAndView(model, templatePath));
    }
}
