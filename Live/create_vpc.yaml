---
- hosts: localhost
  # skips gathering all of the facts about the instance
  gather_facts: no
  module_defaults:
    group/aws:
      region: "us-east-2"
  tasks:
    - name: Create VPC
      ec2_vpc_net:
        name: Module5
        cidr_block: 10.10.0.0/16
        tags:
          Module: 5
        state: present
      register: vpc
    - name: debug
      debug: var=vpc
    - name: Create VPC Public Subnet 1
      ec2_vpc_subnet:
        vpc_id: "{{ vpc.vpc.id }}"
        tags:
          Name: Module5 Public 1
          Module: 5
        cidr: 10.10.0.0/24
        state: present
      register: public_subnet_1
    - name: Create VPC Public Subnet 2
      ec2_vpc_subnet:
        vpc_id: "{{ vpc.vpc.id }}"
        tags:
          Name: Module5 Public 2
          Module: 5
        cidr: 10.10.1.0/24
        state: present
      register: public_subnet_2
    - name: Create VPC Private Subnet 1
      ec2_vpc_subnet:
        vpc_id: "{{ vpc.vpc.id }}"
        tags:
          Name: Module5 Private
          Module: 5
        cidr: 10.10.2.0/24
        state: present
      register: private_subnet_1
    - name: Create VPC Private Subnet 2
      ec2_vpc_subnet:
        vpc_id: "{{ vpc.vpc.id }}"
        tags:
          Name: Module5 Private
          Module: 5
        cidr: 10.10.3.0/24
        state: present
      register: private_subnet_2
    - name: Create Internet Gateway
      ec2_vpc_igw:
        vpc_id: "{{ vpc.vpc.id }}"
        tags:
          Name: Module5 gateway
        state: present
      register: igw
    - name: Set up public subnet route table
      ec2_vpc_route_table:
        vpc_id: "{{ vpc.vpc.id }}"
        tags:
          Name: Module5Public
        subnets:
          - "{{ public_subnet_1.subnet.id }}"
          - "{{ public_subnet_2.subnet.id }}"
        routes:
          - dest: 0.0.0.0/0
            gateway_id: "{{ igw.gateway_id }}"
        state: present
      register: publicsubnet
    - name: Create NAT gateway
      ec2_vpc_nat_gateway:
        subnet_id: "{{ public_subnet_1.subnet.id }}"
        if_exist_do_not_create: yes
        wait: yes
        state: present
      register: nat
    - name: Set up private subnet route table
      ec2_vpc_route_table:
        vpc_id: "{{ vpc.vpc.id }}"
        tags:
          Name: Module5Private
        subnets:
          - "{{ private_subnet_1.subnet.id }}"
          - "{{ private_subnet_2.subnet.id }}"
        routes:
          - dest: 0.0.0.0/0
            gateway_id: "{{ nat.nat_gateway_id }}"
    - name: Set up private subnet ACL
      ec2_vpc_nacl:
        vpc_id: "{{ vpc.vpc.id }}"
        name: Module5-private-acl
        subnets:
          - "{{ private_subnet_1.subnet.id }}"
          - "{{ private_subnet_2.subnet.id }}"
        ingress:
          - [100, 'tcp', 'allow', '10.10.0.0/16', null, null, 5432, 5432]
          - [200, 'tcp', 'allow', '10.10.0.0/16', null, null, 443, 443]
          - [300, 'tcp', 'allow', '10.10.0.0/16', null, null, 1024, 65535]
        egress:
          - [100, 'tcp', 'allow', '10.10.0.0/16', null, null, 1024, 65535]
          - [200, 'tcp', 'allow', '10.10.0.0/16', null, null, 443, 443]
        state: present
    - name: Grab rules for public subnet ACL from .public_acl_rules.yaml
      include_vars:
        file: ".public_acl_rules.yaml"
        name: public_acl_rules
    - name: Set up public subnet ACL
      ec2_vpc_nacl:
        vpc_id: "{{ vpc.vpc.id }}"
        name: Module5-public-acl
        subnets:
          - "{{ public_subnet_1.subnet.id }}"
          - "{{ public_subnet_2.subnet.id }}"
        ingress: "{{ public_acl_rules['ingress'] }}"
        egress: "{{ public_acl_rules['egress'] }}"
        state: present